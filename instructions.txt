This submission contains all files modified and created by the project author as required.

The Rails project in full including necessary supporting third party source code can be accessed and cloned via the Github account:
https://github.com/dbjohn/testGit
A fork of the OpenTripPlanner (OTP) software modified and used for this project can be accessed via:
https://github.com/dbjohn/OpenTripPlanner
In case these repositories are renamed. Then they should be accessed under the github account name of dbjohn.
https://github.com/dbjohn/
The author will try to keep the projects as they were when this final project was submitted. The commit dates can be checked anyway. Cloning these may be the easiest way to explore or reproduce the project.

The source code used in the project consists of a standard Ruby on Rails project and a clone of the OpenTripPlanner Project (https://github.com/openplans/OpenTripPlanner/)
Note that there is small possibility that the github account of opentripplanner could move because openplans relinquished control of the project recently.

The directory structure of both projects is maintained in this submission in order to keep the context. Therefore it will be necessary to traverse down the directories to find files.
But only author edited files remain. This also allows the project to be rebuilt from basic Rails project and a basic Opentripplanner project by copying and pasting these files into the relevant locations.

The Rails project is built in Ruby on Rails version Rails 3.2.9 and Ruby version ruby-1.9.3-p362

Note that the author was using a shared folder between the LAPP stack on the VM on virtual box and the windows host running OTP in eclipse. This allowed by components to access the same file system when sharing OTP routing files. In case file paths are seen and confusion arises, then for the record the rails project root was located at:
On the linux VM:
/media/sf_Main/property_site
It was also accessible via shared folders in windows at:
C:\Users\John\Google_Drive\Folders_from_Skydrive\DIT\Year_4\Final_year_project\Property_site\source_code\Main\property_site

Opentripplanner software was installed on the windows OS host at:
C:\Users\John\Programming\Git\OpenTripPlanner

Created and Edited files
Opentripplanner
To make it explicit what code is written by author (John Brennan) and which code was originally part of the OTP project, the following rule was used:
All source code and comment lines written or modified by author (John Brennan) contain the following comment containing the author's initials (jb) at the end of the line.
Ambiguities with same line modifications will be explained in a comment on the same line.
Everything else is part of the standard Opentripplanner project source code. 
The best way to find all such lines is to use CTRL+F ... 
This applies mainly to the files BatchProcessor.java, BasicPopulation.java, ResultSet.java, Population.java. Which were pre-existing files that were modified for this project.
The class ExternalInvoke was created by the author (jb) for this project.
The configuration files:
batch-context_Amenities.xml  - used to configure a amenities run
batch-context.xml – used to configure a commute run.
simply illustrate the configuration used for the project.  batch-context_Amenities.xml was simply a copy of the standard batch-context.xml that comes with the project, except it was modified for doing an amenity run. In these configurations files, the author has simply added the necessary file paths and settings required for running the application for this project.
batch-context files are in:
\OpenTripPlanner\opentripplanner-analyst\src\main\resources

Rails Project
A similar convention of adding #jb to the end of lines is used in the Ruby on Rails project. Here one can assume that all files shown were created by the authors (jb). Except well known Rails configuration files such as development.rb and gemfile which contain a lot of autogenerated code. The author in no way suggests that he created everything in those files. Only the lines that end in #jb were added by the author. 

Files

Assume that all the following files were created by the author. Files not created by the author may be included in the submission because they contain small modifications by the author or are configuration files provided to give context and additional information. Any significantly modified file will appear in below list.

From the root of the rails project:
In folder lib:
amenity_calc.rb – for calculating amenity scores
commute_calc.rb – for signalling OTP and calculating commute score
scoring.rb – to manage some of the property scoring aspects

in folder script:
properties_export.rb – exports properties from properties table
amenities_export.rb – exports selected amenities from Dublin osm point table
remove_previous.rb – involved in the amenity score pre-processing
properties_inserts.rb – involved in the amenity score pre-processing
call_amenity_calc.rb – calculates amenity scores for all properties
properties_update.rb – was a script written for updating properties with random values for some new attributes

In folder webscrape – contains 3 files for managing webscraping process. Further instructions provided in .txt file.

In folder app/controllers:
home_controller.rb – responsible for handling requests and coordinating all parts of app

in views:
in home:
index.html.haml – search page of website
results.html.haml – results page of website
in layouts:
application.html.haml – main html template page, contains header code.

In assets/javascripts:
Index.js – main file to handle javascript on index.html
Map.js -  main javascript file to handle map related aspects

In assets/stylesheets:
custom.css.scss.erb – handles most CSS for the site
col_resizable_main.css.erb – not created by author but came with a sample from the colResizable plugin. The author did tweak a small number of settings to make style fit with the site. See jb comments.

In config:
database.yml – main db config file. Author added correct connection settings 
routes.rb – main routes config file. Modified by author	

in db/migrate:
this folder contains many migration files all created by the author.
In other_files folder:
This file contains no source code files. All files here were used for interacting between Ruby on Rails and Opentripplanner. They are provided by context.

In RubyCode folder:
This folder contains files and fragments of code created by the author in exploring various aspects to this project.
In folder RubyCode/BatchProcessorCall
This folder was used for exploring and testing some of the following aspects: generating random coordinates for properties for OTP testing, making socket connections, calling OTP batch processor via a ruby script and batch file, exploration of reading/writing CSV files, understanding how comparator methods work in ruby.
In folder OTP_API_Query:
This folder contains files produced while experimenting with communication between ruby and OTP web api.
In folder transport:
This contains files used when experimenting with the Dublin bus SOAP api.

Setting up the application:

Note: there are a lot of steps involved in trying to replicate the environment created for this project. Full documentation would fill at least a book . This would take considerable work, trial and error – possibly hours to days or weeks. And it would be recommended that only someone with experience with some or all of these software components attempt it. The hardest part involves OpenTripPlanner – although someone with Java Spring frameworks may find it easier.

In addition a powerful computer would be recommended, with a least 4-5 GB of Ram.

Rails project

The rails project can be setup on LAPP stack which could be running as a VM on virtual box. Set up with NAT or bridged adapter. The apache server could be (although ruby on rails webrick could be used instead) set up with Phusion Passenger to point to the Rails project. 

The rails project requires a Postgresql database setup. The rails migrations can be ran to create the tables and bring it up to date. 

For storing OSM data, the postgres database needs be extended with postgis.
The tool OSM2pgsql can be used to load an osm file of Dublin into the postgres/postgis database.

Then the webscraping scripts can be run to gather daft.ie data (assuming that the site has not changed), contained in script/Webscrape
This requires a specified webscrape_data directory which was outside the rails project when the author ran it. The file paths here would need to made compatible if setting up on another location.

If desired, the amenities scripts can be run –documented in the report.
Run scripts using the following command from the command line:
rails runner script/<script_name>

for example
rails runner script/amenities_export.rb

additional plugins required are:
1.	quocity.com/colresizable/ which should be included in the Rails asset pipeline.
2.	www.eyecon.ro/bootstrap-datepicker/ should be included in the Rails asset pipeline
3.	The Ravenna subtle patterns background image should be downloaded and put in rails images directory. Alternatively the filename reference in custom.css should be removed.
4.	Twitter Bootstrap Css (http://twitter.github.com/bootstrap/) should be asset pipeline
The gem file included shows which gems are used for the Rails project.

Before running OpenTripPlanner, in the method request_routing_calculation in the file commute_calc.rb in lib, make sure that the hostname points to the same host where OpenTripPlanner is running.

Opentripplanner
It is recommended to run Opentripplanner on Windows or OS which Eclipse IDE can run. There are many instructions for setting up the Opentripplanner project which is well documented at the project Github wiki for example:
https://github.com/openplans/OpenTripPlanner/wiki/Install
https://github.com/openplans/OpenTripPlanner/wiki/GettingStartedEclipse
further assistance available at:
https://groups.google.com/d/forum/opentripplanner-dev
A graph object will first need to be created using transport data in GTFS format.

Opentripplanner Batch analyst must be run first before accessing the website in order to calculate commute times. Check that the port number set up in the class ExternalInvoke of the package org.opentripplanner.analyst.batch
Is the same port number as in commute_calc.rb

In addition the origins, destinations and output file paths specified in batch-context.xml should point to:
\other_files\commute\otp_origin\Origin.csv 
other_files\properties\all_properties.csv
other_files\commute\results\{}_out.csv
All in the rails project.

 The class BatchProcessor in package org.opentripplanner.analyst.batch should be run by “run configurations” in eclipse and selecting the main method of the class. Further detail found here. https://github.com/openplans/OpenTripPlanner/wiki/Batch-Analyst




Any questions try emailing the author at johndbrennan@gmail.com
