-#  openlayers.js was attempted to be included in the assets/javascript 
-#  but it wasn't displaying properly and was just easier to reference from here.
-# It may require extra files in images and stylesheets folder to work from assets.

-# rather than show the to and from times to commute and amenities. It was decided that this is bit too much information.
-# instead just the average of the two times is shown. But it would be easy to show both times if desired.

=content_for :head do 
	= javascript_include_tag "http://www.openlayers.org/api/OpenLayers.js" 

- property_location_hash= {} 				
- amenities_location_hash = {} 				
		
				
.row-fluid
	.span6#results_left_column														
		.accordion#accordion2
			- @properties.each_with_index do |property, index| 					
				.accordion-group
					.accordion-heading
						%a.accordion-toggle{"data-toggle"=>"collapse", "data-parent"=>"#accordion2", :href=>"#collapse#{index}"}
							%span.rank #{index + 1}
							%h4	
								-# credit to this tip here for using the reject.(&blank?).join syntax: http://stackoverflow.com/questions/2434885/ruby-concatenate-strings-and-add-spaces
								-# This will only join the address lines that are not nil/blank into a string 
								#{[property.address_line1, property.address_line2, property.address_line3, property.address_line4].reject(&:blank?).join(', ')}
								
							%span.plus
								%h4 +
								
																																																																																				
					%div{:id=> "collapse#{index}", :class => "accordion-body collapse #{index==0 ? 'in' : ''}"}
						.accordion-inner																				
							
							%table.table.table-bordered
								%thead
									%tr																														
										%th Price
										%th Total Score
										%th Match Score
										%th Amenity Score 
										%th Commute Score
										%th Average Commute																																																											
								%tbody																																								
									%tr																																																																		
										%td â‚¬#{property.price}
										%td #{number_with_precision property.total_score, :precision => 2 }
										%td #{ property.match_score} %																		
										%td #{number_with_precision property.amenity_score, :precision => 2} %
										%td #{number_with_precision property.commute_score, :precision => 2} %																		
										%td #{number_with_precision ((property.commute_time_to.to_f + property.commute_time_from.to_f)/ 2.0), :precision => 2} mins																			
							%p
								#{property.description}
							%p
								=link_to "View more property details", "http://www.daft.ie/searchrental.daft?id=" + property.daft_id																																										
							%p
								%button{:id => "#{property.id}", :class => "btn", :type => "button"} Property Location
							
							/if the user removed all amenities from the advanced options area, unlikely but not impossible as designed, then no information about amenities is shown.
							
							/ note to self, you could create the tabs here. by mapping to amenity_types array. tabs..., then loop.
							/ we have to do a double loop here.
							-if(@amenity_types.length > 0)
								%p
									%b Nearest Amenities:																																		
																
								.tabbable
									%ul.nav.nav-tabs
									
										-@amenity_types.each_with_index do |a_type, index|
											%li{:class => "#{index==0 ? 'active' : ''}" }
												%a{:href=>"##{property.id}tab#{index}", "data-toggle"=>"tab"} #{a_type.humanize.pluralize}
										
								
										/ uniq by will take the first elements of a certain point which are also the best/nearest because the array is sorted by amenity score
										
									.tab-content
										-@amenity_types.each_with_index do |a_type,index|																																				
											-amenities =  PropertiesAmenity.where("property_id = :property_id AND amenity_type = :amenity_type AND transport_mode in (:transport_modes)",
												:property_id => property.id, :amenity_type => a_type, :transport_modes => @transport_modes).order("amenity_score desc").uniq_by {|a| a.dublin_osm_point_id}
																																																																							
											
											%div{:id=>"#{property.id}tab#{index}", :class => "tab-pane #{index==0 ? 'active' : ''}"}
											
												-amenities.take(3).each_with_index do |amenity, index|																																					
													-point = DublinOsmPoint.find( amenity.dublin_osm_point_id)   																		
													-coord = DublinOsmPoint.find_by_sql("select cast(ST_Y(ST_Transform(way,4326)) as numeric) as lat, 
														cast(ST_X(ST_Transform(way,4326)) as numeric) as long from dublin_osm_point where osm_id = #{point.osm_id}").first 
													-unique_id=(property.id).to_s + (point.osm_id).to_s 
																																																																																											
													%b #{index + 1} . 
													=label_tag "#{unique_id}", "#{point.name} ", :class => 'checkbox inline' , :data => {:latitude => coord.lat, :longitude => coord.long}
													=check_box_tag "#{unique_id}", 1, false 
													%div by #{@transport_mode_words_hash[amenity.transport_mode]} taking #{number_with_precision (amenity.to_travel_time.to_f +  amenity.from_travel_time.to_f)/2, :precision=> 2} minutes on average
													
													-amenities_location_hash[unique_id] = [coord.long, coord.lat]  																																																																							
						
								-property_location_hash[property.id] = [property.longitude.to_f, property.latitude.to_f] 								

	.span6#results_right_column
		#map_canvas															
		%br
		%button#commute_locate.btn{:type=>"button"} Commute Location																
	
= javascript_tag "mapGenerate()" 						
= javascript_tag "initResultsMap(#{property_location_hash.to_json}, '#{params[:commute_destination]}' )" 
= javascript_tag "amenitiesPlot(#{amenities_location_hash.to_json})"
		